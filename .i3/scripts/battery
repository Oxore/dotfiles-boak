#!/usr/bin/perl
#
# Copyright 2014 Pierre Mavro <deimos@deimos.fr>
# Copyright 2014 Vivien Didelot <vivien@didelot.org>
#
# Licensed under the terms of the GNU GPL v3, or any later version.
#
# This script is meant to use with i3blocks. It parses the output of the "acpi"
# command (often provided by a package of the same name) to read the status of
# the battery, and eventually its remaining time (to full charge or discharge).
#
# The color will gradually change for a percentage below 85%, and the urgency
# (exit code 33) is set if there is less that 5% remaining.

use strict;
use warnings;
use utf8;
binmode(STDOUT, ":encoding(UTF-8)");

my $acpi;
my $bat_number = $ENV{BLOCK_INSTANCE} || 0;

# read the first line of the "acpi" command output
open (ACPI, "acpi -b | grep 'Battery $bat_number' |") or die;
$acpi = <ACPI>;
close(ACPI);

# fail on unexpected output
if ($acpi !~ /: ([\w\s]+), (\d+)%/) {
	die "$acpi\n";
}

my $percent = $2;

# 0-14   
# 15-39  
# 40-59  
# 60-79  
# 80-100 

my $battery_icon = " ";
if ($percent <= 40) {
    $battery_icon = "";
} elsif ($percent <= 60) {
    $battery_icon = "";
} elsif ($percent <= 80) {
    $battery_icon = "";
} elsif ($percent <= 100) {
    $battery_icon = "";
}

my $status = $1;
my $full_text;
if ($status eq 'Charging') {
    $full_text = "$battery_icon $percent%+";
} elsif ($status eq 'Discharging') {
    $full_text = "$battery_icon $percent%";
} elsif ($percent == 100) {
    $full_text = "$battery_icon";
} else {
    $full_text = "$battery_icon $percent%?";
}

my $short_text = $full_text;

print "$full_text\n";
print "$short_text\n";

# consider color and urgent flag only on discharge
if ($status eq 'Discharging') {
	if ($percent < 40) {
		print "#FF00AA\n";
	} elsif ($percent < 60) {
		print "#FFFF00\n";
	}

	if ($percent < 5) {
		exit(33);
	}
}

print "\n";

exit(0);
