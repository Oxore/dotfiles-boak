#!/bin/bash

usage() {
  cat <<EOF
Usage: $0 <command> <options>:
Commands (mutually exclusive):
  d, download               Download firmware to the chip
  g, gdb-server             Start GDB server on tcp/3333
  l, lock <bank_id>         Enable ROP level=1
  u, unlock <bank_id>       Disable ROP and perform bulk erase
  e, erase <bank_id>        Mass erase a bank specified by <bank_id>
Options:
  -t, --target <target>     Target chip. Following chips supported:
      f1x
      f2x
      f4x
      h7x
      h7x_dual_bank
  -p, --programmer <p>      Device used for programming. One of these:
      jlink
      stlink                --  Actually is ST-Link v3
      stlink-v2
      stlink-v2-1
  -f, --file <path>         Path to hex/bin/elf file
  -s, --offset <offset>     Offset, specified if bin files is used
  -h, --help                Show this help
EOF
}

target_is_valid() {
  local target=$1
  case $target in
    f1x) return 0;;
    f2x) return 0;;
    f4x) return 0;;
    h7x) return 0;;
    h7x_dual_bank) return 0;;
  esac
  return 1;
}

programmer_is_valid() {
  local target=$1
  case $target in
    jlink) return 0;;
    stlink) return 0;;
    stlink-v2) return 0;;
    stlink-v2-1) return 0;;
  esac
  return 1;
}

lock() {
  local programmer=$1
  local target=$2
  local bank_num=$3
  if [ ${target} == "h7x_dual_bank" ]; then
    local target_cmd="h7x"
  else
    local target_cmd="${target}"
  fi
  openocd \
  -f interface/${programmer}.cfg \
  -f target/stm32${target}.cfg \
  -c "init; reset halt; stm32${target_cmd} lock ${bank_num}; reset halt; exit"
}

unlock() {
  local programmer=$1
  local target=$2
  local bank_num=$3
  local target_cmd="${target}"
  if [ ${target} == "h7x_dual_bank" ]; then
    local target_cmd="h7x"
  fi
  openocd \
  -f interface/${programmer}.cfg \
  -f target/stm32${target}.cfg \
  -c "init; reset halt; flash banks; stm32${target_cmd} unlock ${bank_num}; reset halt; exit"
}

download() {
  local offset=
  local file=$3
  local programmer=$1
  local target=$2
  if [ ! -z "$(echo $file | sed -n '/\.bin$/ p')" ]; then
    offset=$4
  fi
  openocd \
    -f interface/${programmer}.cfg \
    -f target/stm32${target}.cfg \
    -c "program ${file} verify reset exit ${offset}"
}

mass_erase() {
  local programmer=$1
  local target=$2
  local bank_num=$3
  local target_cmd=$target
  if [ ${target} == "h7x_dual_bank" ]; then
    local target_cmd="h7x"
  fi
  openocd \
    -f interface/${programmer}.cfg \
    -f target/stm32${target}.cfg \
    -c "init; reset halt; stm32${target_cmd} mass_erase ${bank_num}; reset halt; exit"
}

gdb-server() {
  local programmer=$1
  local target=$2

  openocd \
    -f interface/${programmer}.cfg \
    -f target/stm32${target}.cfg
}

# Main part of script starts here

while [[ "$#" -gt 0 ]]; do case $1 in
  e|erase) ACTION="${ACTION}erase"; BANK_ID=$2; shift;;
  l|lock) ACTION="${ACTION}lock"; BANK_ID=$2; shift;;
  u|unlock) ACTION="${ACTION}unlock"; BANK_ID=$2; shift;;
  d|download) ACTION="${ACTION}download";;
  g|gdb-server) ACTION="${ACTION}gdb-server";;
  -h|--help) usage; exit 0;;
  -f|--file) FILE=$2; shift;;
  -s|--offset) OFFSET=$2; shift;;
  -p|--programmer) PROGRAMMER=$2; shift;;
  -t|--target) TARGET=$2; shift;;
  *) echo "Unknown parameter passed: $1" >&2; >&2 usage; exit 1;;
esac; shift; done

# Validate TARGET
if ! target_is_valid $TARGET; then
  echo "Unknown target \"$TARGET\"" >&2; >&2 usage; exit 1;
elif [[ $TARGET == "" ]]; then
  echo "No target specified" >&2; >&2 usage; exit 1;
fi

# Validate PROGRAMMER
if ! programmer_is_valid $PROGRAMMER; then
  echo "Unknown programming device \"$PROGRAMMER\"" >&2; >&2 usage; exit 1;
elif [[ $PROGRAMMER == "" ]]; then
  echo "No programming device specified" >&2; >&2 usage; exit 1;
fi

# Validate and run command
if [[ $ACTION == "lock" || $ACTION == "l" ]]; then
  lock $PROGRAMMER $TARGET $BANK_ID
elif [[ $ACTION == "unlock" || $ACTION == "u" ]]; then
  unlock $PROGRAMMER $TARGET $BANK_ID
elif [[ $ACTION == "download" || $ACTION == "d" ]]; then
  # Validate FILE
  if [[ $FILE == "" ]]; then
    echo "No firmware file specified to download" >&2; >&2 usage; exit 1;
  fi
  download $PROGRAMMER $TARGET $FILE $OFFSET
elif [[ $ACTION == "gdb-server" || $ACTION == "g" ]]; then
  gdb-server $PROGRAMMER $TARGET
elif [[ $ACTION == "erase" || $ACTION == "e" ]]; then
  mass_erase $PROGRAMMER $TARGET $BANK_ID
elif [[ $ACTION == "" ]]; then
  echo "No command provided" >&2; >&2 usage; exit 1;
else
  echo "Unknown command passed: \"$ACTION\"" >&2; >&2 usage; exit 1;
fi
